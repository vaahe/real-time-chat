// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: src/protos/user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufUserPackage = "user";

/** User entity */
export interface User {
  id: string;
  firstName: string;
  lastName: string;
  nickname: string;
  email: string;
  phone: string;
  avatar: string;
  createdAt: string;
  updatedAt: string;
}

/** Generic single-user response */
export interface UserServiceResponse {
  statusCode: number;
  message: string;
  data: User | undefined;
}

/** Generic list response */
export interface ListUsersResponse {
  statusCode: number;
  message: string;
  data: User[];
  total: number;
}

/** Requests */
export interface CreateUserRequest {
  firstName: string;
  lastName: string;
  nickname: string;
  email: string;
  phone: string;
  avatar: string;
}

export interface GetUserByIdRequest {
  id: string;
}

export interface GetUserByEmailRequest {
  email: string;
}

export interface ListUsersRequest {
  page: number;
  pageSize: number;
}

export interface UpdateUserRequest {
  id: string;
  firstName: string;
  lastName: string;
  nickname: string;
  email: string;
  phone: string;
  avatar: string;
}

export interface DeleteUserRequest {
  id: string;
}

export const USER_PACKAGE_NAME = "user";

/** Service definition */

export interface UserServiceClient {
  createUser(request: CreateUserRequest): Observable<UserServiceResponse>;

  getUserById(request: GetUserByIdRequest): Observable<UserServiceResponse>;

  getUserByEmail(request: GetUserByEmailRequest): Observable<UserServiceResponse>;

  listUsers(request: ListUsersRequest): Observable<ListUsersResponse>;

  updateUser(request: UpdateUserRequest): Observable<UserServiceResponse>;

  deleteUser(request: DeleteUserRequest): Observable<UserServiceResponse>;
}

/** Service definition */

export interface UserServiceController {
  createUser(
    request: CreateUserRequest,
  ): Promise<UserServiceResponse> | Observable<UserServiceResponse> | UserServiceResponse;

  getUserById(
    request: GetUserByIdRequest,
  ): Promise<UserServiceResponse> | Observable<UserServiceResponse> | UserServiceResponse;

  getUserByEmail(
    request: GetUserByEmailRequest,
  ): Promise<UserServiceResponse> | Observable<UserServiceResponse> | UserServiceResponse;

  listUsers(request: ListUsersRequest): Promise<ListUsersResponse> | Observable<ListUsersResponse> | ListUsersResponse;

  updateUser(
    request: UpdateUserRequest,
  ): Promise<UserServiceResponse> | Observable<UserServiceResponse> | UserServiceResponse;

  deleteUser(
    request: DeleteUserRequest,
  ): Promise<UserServiceResponse> | Observable<UserServiceResponse> | UserServiceResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createUser",
      "getUserById",
      "getUserByEmail",
      "listUsers",
      "updateUser",
      "deleteUser",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
